body{
    font-family:Arial, sans-serif;
    margin: 20px;
/* this brings the h1 and h2 texts Only to the center */
    text-align: center;
}

h1,h2{
    color:steelblue;
}

/* 1st div,in this parent we can use grid but not flex or both of them grid and flex */
.grid-basic{
/* when wanting to use grid just like flex,1st you have to kick start it with "display:grid", then you could continue with other grid adjustments */
    display: grid;
/* next,line explains of creating 3 columns */
    grid-template-columns: 100px 100px 100px;
/* next,line explains of creating 2 rows */    
    grid-template-rows: 100px 100px;
/* with 10px gap */
    gap:10px ;
/* next line brings the whole parent div to the center,hence the child div follows */
    justify-content: center;
}

/* inside this children we can use flex but not bith flex and grid */
.grid-item{
    background-color: steelblue;
    color: white;
    /* padding is applied all round but all we can see is the change only on the top. So to fix that see the next 3 lines used with flex */
    padding: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
}

/* 2nd div, */
.grid-span{
   display: grid;
   /* fr is fraction,will take the rest of the width except the two 100px*/
   grid-template-columns: 100px 100px 1fr;
   /* unlike the 1st row 50px fixed, the 2nd row since auto will take the space of the content/element */
   grid-template-rows: 50px auto;
   gap: 10px;
}

.item1{
    /* to take 2 column, we write 1/3, saying starting from 1 to 2,not including 3 */
    grid-column: 1/3;
}

.item2{
    /* 2 has taken the last section of the column */
    grid-column: 3/4;
    /* 2 has taken both of the rows from 1 till 2,not including 3*/
    grid-row: 1/3;
    /* it centers it's self inbetween both row */
    align-self: center;
}

.item3{
    /* from 1 to 1= 1 column, because of 2 & not including 2 */
   grid-column: 1/2; 
   /* 3,will take the last row */
   grid-row: 2/3;
   /* within the space, it's placed at the end of justify/y-axis */
   /* justify-self: end; */
}

.item4{
    grid-column: 2/3;
    grid-row: 2/3;
    /* being place-self, it automatically adjust the functionalities of both "align-slef" and "justify-slef */
    place-self: center;
}
/* 3rd div */
.grid-auto{
    display: grid;
    /*3 means number of colunm & 100px means the size of each item, important info they are all fixed like the 1 div at the top*/
    /* grid-template-columns: repeat(3, 100px); */
    
    /* this unlike the above, being auto-fill makes it resposive and as screen decreases, it takes as many columns as it can making it the most responsive grid of all with minimum size 100px and maximum size 1fr meaning full width  */
    grid-template-columns: repeat(auto-fill , minmax(100px, 1fr));
    gap: 10px;
}
/* 4th div */
.grid-fr{
    display: grid;
    grid-template-columns: 1fr 2fr 1fr;
    gap: 10px;
}
.grid-fr .grid-item:nth-child(2){
    background-color: darkorange;
}